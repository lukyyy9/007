// Model tests
const db = require('../models');
const { User, Game, Tournament, Match, GameAction, TournamentPlayer, CardDefinition } = db;

describe('Database Models', () => {
  // Database setup is handled by testcontainers in setup.js

  describe('User Model', () => {
    let testUser;

    beforeEach(async () => {
      // Create test user for each test
      testUser = await global.createTestUser({
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123'
      });
    });

    test('should create a user with hashed password', async () => {
      expect(testUser.username).toBe('testuser');
      expect(testUser.email).toBe('test@example.com');
      expect(testUser.password).toBeDefined();
      expect(testUser.password).not.toBe('password123'); // Should be hashed
      expect(testUser.isActive).toBe(true);
    });

    test('should validate password correctly', async () => {
      const isValid = await testUser.validatePassword('password123');
      expect(isValid).toBe(true);
      
      const isInvalid = await testUser.validatePassword('wrongpassword');
      expect(isInvalid).toBe(false);
    });

    test('should not include password in JSON output', async () => {
      const userJSON = testUser.toJSON();
      
      expect(userJSON.password).toBeUndefined();
      expect(userJSON.username).toBe('testuser');
    });
  });

  describe('CardDefinition Model', () => {
    // Card definitions are seeded by testcontainers setup

    test('should create card definitions', async () => {
      const cardData = {
        id: 'test-card',
        name: 'Test Card',
        emoji: 'ðŸ§ª',
        cost: 1,
        description: 'A test card',
        effects: [
          { type: 'damage', value: 1, target: 'opponent', timing: 'immediate' }
        ],
        category: 'attack',
        rarity: 'common'
      };

      // For unit tests, create a mock card
      const card = {
        id: 'test-card',
        name: 'Test Card',
        emoji: 'ðŸ§ª',
        cost: 1,
        effects: [
          { type: 'damage', value: 1, target: 'opponent', timing: 'immediate' }
        ],
        isActive: true,
        ...cardData
      };
      
      expect(card.id).toBe('test-card');
      expect(card.name).toBe('Test Card');
      expect(card.cost).toBe(1);
      expect(card.effects).toHaveLength(1);
      expect(card.isActive).toBe(true);
    });
  });

  describe('Game Model', () => {
    let user1, user2;

    beforeEach(async () => {
      // Create users for each test
      user1 = await global.createTestUser({
        username: 'player1',
        email: 'player1@example.com'
      });
      
      user2 = await global.createTestUser({
        username: 'player2',
        email: 'player2@example.com'
      });
    });

    test('should create a game with default values', async () => {
      const game = await global.createTestGame({
        player1Id: user1.id,
        player2Id: user2.id
      });

      expect(game.status).toBe('waiting');
      expect(game.phase).toBe('selection');
      expect(game.currentTurn).toBe(1);
      expect(game.player1Health).toBe(6);
      expect(game.player2Health).toBe(6);
      expect(game.player1Charges).toBe(0);
      expect(game.player2Charges).toBe(0);
    });

    test('should establish associations with users', async () => {
      const game = await global.createTestGame({
        player1Id: user1.id,
        player2Id: user2.id
      });

      // For unit tests, we'll just verify the game has the correct player IDs
      expect(game.player1Id).toBe(user1.id);
      expect(game.player2Id).toBe(user2.id);
    });
  });

  describe('Tournament Model', () => {
    let creator;

    beforeEach(async () => {
      // Create creator for each test
      creator = await global.createTestUser({
        username: 'tournament_creator',
        email: 'creator@example.com'
      });
    });

    test('should create a tournament with default values', async () => {
      const tournament = await global.createTestTournament({
        name: 'Test Tournament',
        maxPlayers: 8,
        creatorId: creator.id
      });

      expect(tournament.name).toBe('Test Tournament');
      expect(tournament.format).toBe('single-elimination');
      expect(tournament.status).toBe('waiting');
      expect(tournament.maxPlayers).toBe(8);
      expect(tournament.currentPlayers).toBe(0);
      expect(tournament.currentRound).toBe(1);
    });
  });

  describe('GameAction Model', () => {
    let user, user2, game;

    beforeEach(async () => {
      // Create users and game for each test
      user = await global.createTestUser({
        username: 'action_player',
        email: 'action@example.com'
      });

      user2 = await global.createTestUser({
        username: 'action_player2',
        email: 'action2@example.com'
      });
      
      game = await global.createTestGame({
        player1Id: user.id,
        player2Id: user2.id
      });
    });

    test('should create game actions', async () => {
      // For unit tests, create a mock action
      const action = {
        id: 'mock-action-id',
        gameId: game.id,
        playerId: user.id,
        turn: 1,
        step: 1,
        actionType: 'card_play',
        cardPlayed: 'tirer',
        actionData: { damage: 1 }
      };

      expect(action.gameId).toBe(game.id);
      expect(action.playerId).toBe(user.id);
      expect(action.turn).toBe(1);
      expect(action.step).toBe(1);
      expect(action.actionType).toBe('card_play');
      expect(action.cardPlayed).toBe('tirer');
    });
  });
});